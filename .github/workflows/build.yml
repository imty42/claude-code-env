name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: windows
            goarch: amd64
            suffix: windows-amd64
            ext: .exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true  # 启用缓存，现在我们有 go.sum 文件

    - name: Get dependencies
      run: go mod download

    - name: Build
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p dist
        go build -ldflags "-s -w -X main.Version=${GITHUB_REF_NAME:-dev}" -o dist/ccenv-${{ matrix.suffix }}${{ matrix.ext }} ./cmd/ccenv

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ccenv-${{ matrix.suffix }}${{ matrix.ext }}
        path: dist/ccenv-${{ matrix.suffix }}${{ matrix.ext }}
        retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist

    - name: Prepare release files
      run: |
        mkdir -p release
        find dist -name "ccenv-*" -type f -exec cp {} release/ \;
        ls -la release/

    - name: Generate checksums
      run: |
        cd release
        sha256sum * > checksums.txt
        cat checksums.txt

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ github.ref_name }}
        body: |
          ## Claude Code Env ${{ github.ref_name }}
          
          ### 下载说明
          - `ccenv-darwin-amd64` - macOS Intel 版本
          - `ccenv-darwin-arm64` - macOS Apple Silicon 版本  
          - `ccenv-linux-amd64` - Linux 64位版本
          - `ccenv-windows-amd64.exe` - Windows 64位版本
          
          ### 安装方法
          1. 下载对应平台的二进制文件
          2. 重命名为 `ccenv` （Windows 保持 `.exe` 后缀）
          3. 添加执行权限：`chmod +x ccenv`
          4. 移动到系统 PATH：`sudo mv ccenv /usr/local/bin/`
          
          ### 校验文件完整性
          ```bash
          sha256sum -c checksums.txt
          ```
          
          ---
          
          🚀 **首次使用**：运行 `ccenv` 会自动引导您创建配置文件
          
          📖 **详细文档**：查看 [README.md](https://github.com/imty42/claude-code-env/blob/main/README.md)
        files: |
          release/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true  # 启用缓存，现在我们有 go.sum 文件

    - name: Run tests
      run: go test -v ./...

    - name: Build test
      run: go build -o ccenv ./cmd/ccenv

    - name: Basic functionality test
      run: |
        # Test help output
        ./ccenv --help || ./ccenv -h || echo "Help test completed"
        # Test without config (should show error)
        ./ccenv test-service || echo "No config test completed"